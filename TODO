Roadmap:
  0.3: Implement rounding control completely. Hopefully use more
       conditional compilation for rounding and such.
  0.4: Add more functions. Make better use of autoconf and automake,
       enabling libaffine to be easily distributable.
  0.5: Complete work on implicit grapher.
  0.6: Improve ComplexAffine.

Ideas:

----0.3----

* s/" "/' '/g

* Use ctime instead of forking date

* Unify 'f' and 'b'.

* Use scaled integers instead of floating point in output?
  - use a 1:1 aspect ratio so lines aren't wierd

* Implement gradient-based tangent stuff.
  - make lines a reasonable length

* Implement solve_linear for arbitrary number of inputs

* expr:
  - Robustify:
    o throw non-stupid error messages
    o provide mal-formed expression diagnostics
    o possibly catch domain errors in the expression tree
    o clean up poor coding practices
  - Implement more optimizations
    o CSE can be done with a hash table; then topologically sort nodes
      and evaluate in order (Intro to Compiler Construction; pg. 231)
    o Implement rationals/reals
    o Allow calling functions from DLL's

* Add physical output size option to implicit-{affine,interval}.

* Figure out the best places to call collapse().
  - Possibly every few operations would be optimal.
  - Setting to choose at runtime.

* Set version to 0.3 to avoid silly patchlevel regression

* Make should fail if an autogenerated file is older than its template.

* Variables in Aadc should be references (smart_ptr), lazily converted
  to values when necessary; prevents unnecessary copy operations.
  - Commutative operators should swap their arguments if it would
    prevent a copy from occurring.
  - Replace division with * and inverseA, so commutative swapping works.
  - Use common subexpression elimination.

* Make monotonic_func for affine...calculate f(lo), f(hi), alpha.

* Be more careful with zero-width affine ranges...alpha is NaN.

* Replace sin function with simpler approximation using average slope.

* Revise sqr(Affine) to not do power operation twice.

* Pagesize in palist is silly, eliminate.

* Use intervals instead of floats everywhere except for deviations.
  - Conditional compilation to use floats instead.

* Eliminate unnecessary calls to half_width.

* remove redundant checks in Affine functions that Interval already does

* write more comments

* Rewrite in CWEB. Yeah, right.

* implement rounding control:
  affine.h:
    pow(double, Affine)
  affine.cpp:
    calc
    Affine(double, double)
    Affine(Interval)
    +=(Affine)
    -=(Affine)
    +=(double)
    -=(double)
    *=(double)
    /=(double)
    *=(Affine)
    Invert
    half_width
    collapse
    exp
    log
    sqrt
    sqr
    pow(Affine, int)
    abs
    symsincos
    sincos

----0.4----

* Make an install target.

* Makefiles still suck.

* Do a real speed comparison of different parameters.

* Integrals, with respect to one of the input variables. Should be
  modeled by a simple double quadratic.

* max(x, y) = (x + y + abs(x - y)) / 2
  min(x, y) = (x + y - abs(x - y)) / 2

* Implement nth root function.

* Include autogenerated version number in libaffine?
  - Create version string that programs can test?

* Forth Aadc!!!

* Make a stack for each of integer, rational, interval, affine, complexaffine.
  - It should be explicit which stack is being operated on.
  - Maybe an expression stack is necessary too.
  - As well as a string stack to look up function and variable names.

* Make temporary variables const when possible.

* Make functions const when possible.

* Add more constants.

* complete autoconf script, eventually automake
  - cpp macros should be cleaner (in separate files)

* implement more math functions:
  sinh, cosh, tanh, sec, csc, cot, asin, acos, atan, atan2, asinh,
  acosh, atanh, erf, lngamma, gamma, ldexp

* split libaffine into more files by logical criteria

* do a better job on two-variable functions.
  - make better affine multiplication algorithm

* Implement polynomial evaluation as described in ``Affine Arithmetic
  in Matrix Form for Polynomial Evaluation and Algebraic Curve Drawing.''

* put functions and constants in namespaces

* implement more regression/correctness tests for interval/affine

----0.5----

* Give aadc integers and rationals. They should be promoted only when
  necessary.

* Complete implicit grapher
  - aadc and imgraph should use the same stack-based backend.
  - Build a vector of function pointers/functors for expressions,
    instead of a parse tree.
  - Write real EPS files.
    %%DocumentNeededFonts: Times-Roman
    %%CreationDate: `date`
    %%EndComments
    begin/end for dictionary
    showpage
    %%EOF

* clean up pipe/fd situation in pipestream class

* make a symbol table for constants
  - allocate special IDs to constants?

* idea: make a goal for the output area, and subdivide the input until
  the goal is met. area = (input width) * (output height)

* Look at using judy trees instead of linked lists
  - Or doubly-linked lists

----0.6----

* Improve ComplexAffine
  - Let deviations interact better
  - More functions

----???----

* Make DevAllocator dynamic size?
